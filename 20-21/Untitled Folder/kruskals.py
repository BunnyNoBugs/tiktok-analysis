from typing import List


def Kruskal(graph: List[list]) -> List[list]:
    # не понял прекола, пайчарм говорит что у меня dict[dict] в тайпингах
    s_graph = sorted(graph, key=lambda x: x[0])
    binded = []  # список соединенных вершин
    isol_V = {}  # словарь списка изолированных групп вершин
    MST = []  # список ребер остова

    for r in s_graph:
        # если хотя бы одна веришна изолирована
        if r[1] not in binded or r[2] not in binded:
            # если обе вершины изолированы, то соединяем их
            if r[1] not in binded and r[2] not in binded:
                # по-факту пишем: "вершина 3 соединениа ребром 3-4,
                # вершина 4 соединениа ребром 3-4"
                isol_V[r[1]] = [r[1], r[2]]
                isol_V[r[2]] = isol_V[r[1]]
            # если только одна вершина изолирована
            else:
                # если изолирована первая вершина, то
                # добавляем её в уже готовое соединение со второй вершиной
                # и копируем с другим индексом
                if not isol_V.get(r[1]):
                    isol_V[r[2]].append(r[1])
                    isol_V[r[1]] = isol_V[r[2]]

                else:
                    # иначе, все то же самое делаем со второй вершиной
                    # то есть мы вообще не трогаем
                    # уже с чем-то соединенную вершину
                    isol_V[r[1]].append(r[2])
                    isol_V[r[2]] = isol_V[r[1]]

            MST.append(r)  # добавляем ребро в остов
            binded.append(r[1])  # добавляем вершины как соединенные в binded
            binded.append(r[2])

    for r in s_graph:  # объединяем разрозненные соединения вершин
        # если вершины принадлежат разным группам, то объединяем
        if r[2] not in isol_V[r[1]]:
            # добавляем ребро в остов
            # объединем списки двух групп вершин
            MST.append(r)
            grouped = isol_V[r[1]]
            isol_V[r[1]] += isol_V[r[2]]
            isol_V[r[2]] += grouped

    return MST


graph2 = [[10, 0, 1], [6, 0, 2], [5, 2, 3], [15, 1, 3], [4, 2, 3]]
print(Kruskal(graph2))

graph1 = [[13, 1, 2], [18, 1, 3], [17, 1, 4], [14, 1, 5], [22, 1, 6],
          [26, 2, 3], [22, 2, 5], [3, 3, 4], [19, 4, 6]]
print(Kruskal(graph1))
